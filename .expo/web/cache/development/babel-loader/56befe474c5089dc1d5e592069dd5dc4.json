{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\", \"openByDefault\", \"lazy\", \"drawerContentOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\n\nfunction DrawerNavigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n      defaultStatus = _ref.defaultStatus,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      openByDefault = _ref.openByDefault,\n      lazy = _ref.lazy,\n      drawerContentOptions = _ref.drawerContentOptions,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var defaultScreenOptions = {};\n\n  if (drawerContentOptions) {\n    _extends2(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n    initialRouteName: initialRouteName,\n    defaultStatus: defaultStatus !== undefined ? defaultStatus : openByDefault ? 'open' : 'closed',\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["rest","defaultScreenOptions","Object","drawerPosition","drawerContentOptions","drawerType","swipeEdgeWidth","drawerHideStatusBarOnOpen","keyboardDismissMode","swipeMinDistance","overlayColor","drawerStatusBarAnimation","gestureHandlerProps","key","warnOnce","JSON","NavigationContent","useNavigationBuilder","initialRouteName","defaultStatus","openByDefault","backBehavior","children","screenListeners","screenOptions","navigation","createNavigatorFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,sBAAA,EAAA,YAAA,EAAA,oBAAA,QAAA,0BAAA;AAUA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,WAAA;AAOA,OAAA,UAAA;;AAWA,SAAA,eAAA,OAcU;EAAA,IAde,gBAcf,QAde,gBAcf;EAAA,IAde,aAcf,QAde,aAcf;EAAA,IAde,YAcf,QAde,YAcf;EAAA,IAde,QAcf,QAde,QAcf;EAAA,IAde,eAcf,QAde,eAcf;EAAA,IAde,aAcf,QAde,aAcf;EAAA,IAde,aAcf,QAde,aAcf;EAAA,IAde,IAcf,QAde,IAcf;EAAA,IAde,oBAcf,QAde,oBAcf;EAAA,IADLA,IACK;;EACR,IAAIC,oBAA6C,GAAjD,EAAA;;EAEA,IAAA,oBAAA,EAA0B;IACxBC,UAAAA,oBAAAA,EAAoC;MAClCC,cAAc,EAAEC,oBAAoB,CADF,cAAA;MAElCC,UAAU,EAAED,oBAAoB,CAFE,UAAA;MAGlCE,cAAc,EAAEF,oBAAoB,CAHF,SAAA;MAIlCG,yBAAyB,EAAEH,oBAAoB,CAJb,aAAA;MAKlCI,mBAAmB,EAAEJ,oBAAoB,CALP,mBAAA;MAMlCK,gBAAgB,EAAEL,oBAAoB,CANJ,gBAAA;MAOlCM,YAAY,EAAEN,oBAAoB,CAPA,YAAA;MAQlCO,wBAAwB,EAAEP,oBAAoB,CARZ,kBAAA;MASlCQ,mBAAmB,EAAER,oBAAoB,CAACQ;IATR,CAApCV;;IAaEA,MAAM,CAANA,IAAAA,CADF,oBACEA,EADF,OACEA,CACSW,UAAAA,GAAD,EAAS;MACjB,IAAIZ,oBAAoB,CAApBA,GAAoB,CAApBA,KAAJ,SAAA,EAA6C;QAE3C,OAAOA,oBAAoB,CAA3B,GAA2B,CAA3B;MACD;IANH,CACEC;IAQFY,QAAQ,CAAA,oBAAA,mMAEyLC,IAAI,CAAJA,SAAAA,CAAAA,oBAAAA,EAAAA,IAAAA,EAFjMD,CAEiMC,CAFzL,yFAARD;EAQD;;EAED,IAAI,OAAA,IAAA,KAAJ,SAAA,EAA+B;IAC7Bb,oBAAoB,CAApBA,IAAAA,GAAAA,IAAAA;IAEAa,QAAQ,CAARA,IAAQ,0KAARA;EAID;;EAED,IAAI,OAAA,aAAA,KAAJ,SAAA,EAAwC;IACtCA,QAAQ,CAARA,IAAQ,6MAARA;EAID;;EAED,4BACEG,oBAAoB,CAAA,YAAA,EAMJ;IACdC,gBADc,EACdA,gBADc;IAEdC,aAAa,EACXA,aAAa,KAAbA,SAAAA,GAAAA,aAAAA,GAEIC,aAAa,GAAA,MAAA,GALL,QAAA;IAQdC,YARc,EAQdA,YARc;IASdC,QATc,EASdA,QATc;IAUdC,eAVc,EAUdA,eAVc;IAWdC,aAXc,EAWdA,aAXc;IAYdvB,oBAAAA,EAAAA;EAZc,CANI,CADtB;EAAA,IAAM,KAAN,yBAAM,KAAN;EAAA,IAAM,WAAN,yBAAM,WAAN;EAAA,IAAM,UAAN,yBAAM,UAAN;EAAA,IAAwCe,iBAAxC,yBAAwCA,iBAAxC;;EAsBA,OACE,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;IAEE,KAAK,EAFP,KAAA;IAGE,WAAW,EAHb,WAAA;IAIE,UAAU,EAAES;EAJd,CAAA,CAAA,CADF,CADF;AAUD;;AAED,eAAeC,sBAAsB,CAArC,eAAqC,CAArC","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  initialRouteName,\n  defaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  // @ts-expect-error: openByDefault is deprecated\n  openByDefault,\n  // @ts-expect-error: lazy is deprecated\n  lazy,\n  // @ts-expect-error: drawerContentOptions is deprecated\n  drawerContentOptions,\n  ...rest\n}: Props) {\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      initialRouteName,\n      defaultStatus:\n        defaultStatus !== undefined\n          ? defaultStatus\n          : openByDefault\n          ? 'open'\n          : 'closed',\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module"}