{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{CommonActions,DrawerActions,useLinkBuilder}from'@react-navigation/native';import*as React from'react';import DrawerItem from\"./DrawerItem\";export default function DrawerItemList(_ref){var state=_ref.state,navigation=_ref.navigation,descriptors=_ref.descriptors;var buildLink=useLinkBuilder();return state.routes.map(function(route,i){var focused=i===state.index;var _descriptors$route$ke=descriptors[route.key].options,title=_descriptors$route$ke.title,drawerLabel=_descriptors$route$ke.drawerLabel,drawerIcon=_descriptors$route$ke.drawerIcon,drawerActiveTintColor=_descriptors$route$ke.drawerActiveTintColor,drawerInactiveTintColor=_descriptors$route$ke.drawerInactiveTintColor,drawerActiveBackgroundColor=_descriptors$route$ke.drawerActiveBackgroundColor,drawerInactiveBackgroundColor=_descriptors$route$ke.drawerInactiveBackgroundColor,drawerLabelStyle=_descriptors$route$ke.drawerLabelStyle,drawerItemStyle=_descriptors$route$ke.drawerItemStyle;return React.createElement(DrawerItem,{key:route.key,label:drawerLabel!==undefined?drawerLabel:title!==undefined?title:route.name,icon:drawerIcon,focused:focused,activeTintColor:drawerActiveTintColor,inactiveTintColor:drawerInactiveTintColor,activeBackgroundColor:drawerActiveBackgroundColor,inactiveBackgroundColor:drawerInactiveBackgroundColor,labelStyle:drawerLabelStyle,style:drawerItemStyle,to:buildLink(route.name,route.params),onPress:function onPress(){navigation.dispatch(_objectSpread(_objectSpread({},focused?DrawerActions.closeDrawer():CommonActions.navigate(route.name)),{},{target:state.key}));}});});}","map":{"version":3,"sources":["DrawerItemList.tsx"],"names":["descriptors","buildLink","useLinkBuilder","focused","i","state","drawerItemStyle","route","drawerLabel","title","navigation","DrawerActions","CommonActions","target","key"],"mappings":"w0BAAA,OAAA,aAAA,CAAA,aAAA,CAAA,cAAA,KAAA,0BAAA,CAOA,MAAO,GAAP,CAAA,KAAA,KAAA,OAAA,CAGA,MAAA,CAAA,UAAA,oBAWA,cAAe,SAAA,CAAA,cAAA,MAIL,IAJ6B,CAAA,KAI7B,MAJ6B,KAI7B,CAJ6B,UAI7B,MAJ6B,UAI7B,CADRA,WACQ,MADRA,WACQ,CACR,GAAMC,CAAAA,SAAS,CAAGC,cAAlB,EAAA,CAEA,MAAO,CAAA,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,SAAA,KAAA,CAAA,CAAA,CAAc,CACpC,GAAMC,CAAAA,OAAO,CAAGC,CAAC,GAAKC,KAAK,CAA3B,KAAA,CACA,0BAUIL,WAAW,CAACO,KAAK,CAAjBP,GAAW,CAAXA,CAVJ,OAAA,CAAM,KAAN,uBAAM,KAAN,CAAM,WAAN,uBAAM,WAAN,CAAM,UAAN,uBAAM,UAAN,CAAM,qBAAN,uBAAM,qBAAN,CAAM,uBAAN,uBAAM,uBAAN,CAAM,2BAAN,uBAAM,2BAAN,CAAM,6BAAN,uBAAM,6BAAN,CAAM,gBAAN,uBAAM,gBAAN,CASEM,eATF,uBASEA,eATF,CAYA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,UAAA,CAAA,CACE,GAAG,CAAEC,KAAK,CADZ,GAAA,CAEE,KAAK,CACHC,WAAW,GAAXA,SAAAA,CAAAA,WAAAA,CAEIC,KAAK,GAALA,SAAAA,CAAAA,KAAAA,CAEAF,KAAK,CAPb,IAAA,CASE,IAAI,CATN,UAAA,CAUE,OAAO,CAVT,OAAA,CAWE,eAAe,CAXjB,qBAAA,CAYE,iBAAiB,CAZnB,uBAAA,CAaE,qBAAqB,CAbvB,2BAAA,CAcE,uBAAuB,CAdzB,6BAAA,CAeE,UAAU,CAfZ,gBAAA,CAgBE,KAAK,CAhBP,eAAA,CAiBE,EAAE,CAAEN,SAAS,CAACM,KAAK,CAAN,IAAA,CAAaA,KAAK,CAjBjC,MAiBe,CAjBf,CAkBE,OAAO,CAAE,kBAAM,CACbG,UAAU,CAAVA,QAAAA,gCACMP,OAAO,CACPQ,aAAa,CADN,WACPA,EADO,CAEPC,aAAa,CAAbA,QAAAA,CAAuBL,KAAK,CAHd,IAGdK,CAHNF,MAIEG,MAAM,CAAER,KAAK,CAACS,GAJhBJ,IAMD,CAzBH,CAAA,CADF,CAdF,CAAO,CAAP,CA4CD","sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerActiveTintColor,\n      drawerInactiveTintColor,\n      drawerActiveBackgroundColor,\n      drawerInactiveBackgroundColor,\n      drawerLabelStyle,\n      drawerItemStyle,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={() => {\n          navigation.dispatch({\n            ...(focused\n              ? DrawerActions.closeDrawer()\n              : CommonActions.navigate(route.name)),\n            target: state.key,\n          });\n        }}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]},"metadata":{},"sourceType":"module"}